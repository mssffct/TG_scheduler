version: "3.9"

services:
#  scheduler-backend:
#    restart: always
#    container_name: scheduler-backend
#    build:
#      context: ./scheduler_backend
#    environment:
#      DOCKER_CONTAINER_MODE: 1
#    env_file: .env
#    expose:
#      - "8005"
#    command: daphne -b 0.0.0.0 -p 8005 backend.asgi:application
#    depends_on:
#      - scheduler-postgres
#      - scheduler-redis
#    volumes:
#      - media:/app/media
#      - static:/app/static
#      - ./scheduler_backend:/app
#    networks:
#      - main
#
#  scheduler-frontend:
#    restart: always
#    container_name: scheduler-frontend
#    build:
#      context: ./scheduler_frontend
#    ports:
#      - "8001:8001"
#    volumes:
#      - static:/srv/static
#      - media:/srv/media
#    depends_on:
#      - scheduler-backend
#    networks:
#      - main

  scheduler-postgres:
    image: postgres:13.4
    container_name: scheduler-postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
#    expose:
#      - ${POSTGRES_PORT}
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    restart: always
    volumes:
      - ./data/postgres/:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    command: -p ${POSTGRES_PORT}
    networks:
      - main

#  scheduler-redis:
#    image: redis
#    container_name: scheduler-redis
#    expose:
#      - "6379"
#    restart: always
#    networks:
#      - main
#
#  scheduler-celery:
#    container_name: scheduler-celery
#    build:
#      context: ./scheduler_backend
#    environment:
#      DOCKER_CONTAINER_MODE: 1
#    env_file: .env
#    command: [ "python3", "celery_run.py" ]
#    volumes:
#      - ./scheduler_backend:/app
#    depends_on:
#      - scheduler-backend
#    networks:
#      - main
#
#  telegram_service_sender:
#    container_name: tg-bot-sender
#    command: sh -c "uvicorn app.main:app --reload --host 0.0.0.0"
#    build:
#      context: ./telegram_service/sender
#    ports:
#      - "8010:8000"
#    tty: true
#
#  telegram_service_receiver:
#    container_name: tg-bot-receiver
#    command: sh -c "python3 main.py"
#    build:
#      context: ./telegram_service/receiver
#    tty: true
#    stdin_open: true

volumes:
  media:
  static:

networks:
  main:
    driver: bridge